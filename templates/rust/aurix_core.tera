{% import "macros.tera" as macros %}
/*
{{ir.license_text}}
*/
#![allow(clippy::identity_op)]
#![allow(clippy::module_inception)]
#![allow(clippy::derivable_impls)]
#[allow(unused_imports)]
use crate::common::{*};
#[allow(unused_imports)]
use crate::common::sealed;
#[doc = r"{{peri.description | svd_description_to_doc}}"]
{% set peri_struct = "CsfrCpu" | to_struct_id -%}
{% set peri_base_addr = peri.base_addr[0]  -%}
unsafe impl core::marker::Send for super::CsfrCpu  {}
unsafe impl core::marker::Sync for super::CsfrCpu  {}
impl super::CsfrCpu {
{%- for register_name,reg in peri.registers %}
{{macros::register_core_func(types_mod="self",reg=reg, base_addr=peri_base_addr)}}
{% endfor -%}
{% for cluster_name,cluster in peri.clusters -%}
{{macros::cluster_func_csfr(types_mod="self",cluster=cluster, base_addr=peri_base_addr)}}
{% endfor %}

}
{% for register_name,reg in peri.registers -%}
{{macros::register_struct(reg_name=reg.name,reg=reg)}}
{% endfor %}
{% for cluster_name,cluster in peri.clusters -%}
{% for register_name,reg in cluster.registers -%}
{% set cluster_reg_name = cluster.name~"_"~reg.name  -%}
{{macros::register_struct(reg_name=cluster_reg_name,reg=reg)}}
{% endfor %}
{% endfor %}





